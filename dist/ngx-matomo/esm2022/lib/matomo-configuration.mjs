import { InjectionToken } from '@angular/core';
export const defaultTrackers = Promise.resolve({
    trackers: [],
});
export const defaultTrackingConfiguration = {
    disableCrossDomainLinking: false,
    disableCookies: false,
    doNotUserSendBeacon: false,
    enableDoNotTrack: false,
    consentRequirement: 'NONE',
    detectBrowserFeatures: false,
    trackJavaScriptErrors: false,
    disableCampaignParametersTracking: false,
};
export const defaultRouteTrackingConfiguration = {
    linkTracking: 'NONE',
    clearIds: false,
    idReplacement: ':id',
    clearMatrixParams: false,
    clearQueryParams: false,
    clearHash: false,
};
/**
 * Injection token for internal Matomo trackers.
 */
export const MATOMO_TRACKERS_INTERNAL_CONFIGURATION = new InjectionToken('Matomo trackers internal configuration');
/**
 * Injection token for internal Matomo tracking configuration.
 */
export const MATOMO_TRACKING_INTERNAL_CONFIGURATION = new InjectionToken('Matomo tracking internal configuration');
/**
 * Injection token for internal Matomo route tracking configuration.
 */
export const MATOMO_ROUTE_TRACKING_INTERNAL_CONFIGURATION = new InjectionToken('Matomo route tracking internal configuration');
/**
 * Injection token for Matomo debug tracing.
 */
export const MATOMO_DEBUG_TRACING = new InjectionToken('Matomo debug tracing');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0b21vLWNvbmZpZ3VyYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbWF0b21vL3NyYy9saWIvbWF0b21vLWNvbmZpZ3VyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQXVCL0MsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUE0QixPQUFPLENBQUMsT0FBTyxDQUFDO0lBQ3RFLFFBQVEsRUFBRSxFQUFFO0NBQ2IsQ0FBQyxDQUFDO0FBb0JILE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFnQztJQUN2RSx5QkFBeUIsRUFBRSxLQUFLO0lBQ2hDLGNBQWMsRUFBRSxLQUFLO0lBQ3JCLG1CQUFtQixFQUFFLEtBQUs7SUFDMUIsZ0JBQWdCLEVBQUUsS0FBSztJQUN2QixrQkFBa0IsRUFBRSxNQUFNO0lBQzFCLHFCQUFxQixFQUFFLEtBQUs7SUFDNUIscUJBQXFCLEVBQUUsS0FBSztJQUM1QixpQ0FBaUMsRUFBRSxLQUFLO0NBQ3pDLENBQUM7QUFZRixNQUFNLENBQUMsTUFBTSxpQ0FBaUMsR0FBcUM7SUFDakYsWUFBWSxFQUFFLE1BQU07SUFDcEIsUUFBUSxFQUFFLEtBQUs7SUFDZixhQUFhLEVBQUUsS0FBSztJQUNwQixpQkFBaUIsRUFBRSxLQUFLO0lBQ3hCLGdCQUFnQixFQUFFLEtBQUs7SUFDdkIsU0FBUyxFQUFFLEtBQUs7Q0FDakIsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0NBQXNDLEdBQUcsSUFBSSxjQUFjLENBQ3RFLHdDQUF3QyxDQUN6QyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxzQ0FBc0MsR0FDakQsSUFBSSxjQUFjLENBQThCLHdDQUF3QyxDQUFDLENBQUM7QUFFNUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw0Q0FBNEMsR0FDdkQsSUFBSSxjQUFjLENBQ2hCLDhDQUE4QyxDQUMvQyxDQUFDO0FBRUo7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLGNBQWMsQ0FBVSxzQkFBc0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxudHlwZSBDbGlja1RyYWNraW5nT3B0aW9uID0gJ05PTkUnIHwgJ0xFRlRfQ0xJQ0tfT05MWScgfCAnTEVGVF9NSURETEVfUklHSFRfQ0xJQ0tTJztcblxuZXhwb3J0IHR5cGUgTWF0b21vQ29uc2VudFJlcXVpcmVtZW50ID0gJ05PTkUnIHwgJ0NPT0tJRScgfCAnVFJBQ0tJTkcnO1xuXG5leHBvcnQgdHlwZSBNYXRvbW9Sb3V0ZURhdGEgPSB7XG4gIHRyYWNraW5nPzogJ0FVVE8nIHwgJ09GRic7XG4gIHRpdGxlPzogc3RyaW5nO1xuICBpZFJlZ0V4cD86IFJlZ0V4cDtcbn07XG5cbmV4cG9ydCB0eXBlIE1hdG9tb1RyYWNrZXJzID0ge1xuICAvKipcbiAgICogVVJMIG9mIHRoZSBNYXRvbW8gSlMgc2NyaXB0IHRvIGV4ZWN1dGUuXG4gICAqL1xuICBzY3JpcHRVcmw/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBBcnJheSBvZiB0cmFja2VycywgZWFjaCBvbmUgb2YgdGhlbSBiZWluZyBkZXNjcmliZWQgYnkgaXRzIFVSTCBhbmQgc2l0ZSBpZC5cbiAgICovXG4gIHRyYWNrZXJzOiB7IHRyYWNrZXJVcmw6IHN0cmluZzsgc2l0ZUlkOiBudW1iZXIgfVtdO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRUcmFja2VyczogUHJvbWlzZTxNYXRvbW9UcmFja2Vycz4gPSBQcm9taXNlLnJlc29sdmUoe1xuICB0cmFja2VyczogW10sXG59KTtcblxuZXhwb3J0IHR5cGUgTWF0b21vVHJhY2tpbmdDb25maWd1cmF0aW9uID0ge1xuICBkaXNhYmxlQ3Jvc3NEb21haW5MaW5raW5nPzogYm9vbGVhbjsgLy8gVE9ETzogY3VycmVudGx5IGluYWN0aXZlXG4gIGRpc2FibGVDb29raWVzPzogYm9vbGVhbjtcbiAgc2VjdXJlQ29va2llPzogYm9vbGVhbjtcbiAgY29va2llRG9tYWluPzogc3RyaW5nO1xuICBjb29raWVQYXRoPzogc3RyaW5nO1xuICBjb29raWVTYW1lU2l0ZT86ICdMYXgnIHwgJ1N0cmljdCcgfCAnTm9uZSc7XG4gIGRvTm90VXNlclNlbmRCZWFjb24/OiBib29sZWFuO1xuICBkZXRlY3RCcm93c2VyRmVhdHVyZXM/OiBib29sZWFuO1xuICBlbmFibGVEb05vdFRyYWNrPzogYm9vbGVhbjtcbiAgY29uc2VudFJlcXVpcmVtZW50PzogTWF0b21vQ29uc2VudFJlcXVpcmVtZW50O1xuICB0cmFja0phdmFTY3JpcHRFcnJvcnM/OiBib29sZWFuO1xuICBsb2NhbERvbWFpbnM/OiBzdHJpbmdbXTtcbiAgaGVhcnRCZWF0VGltZXI/OiBudW1iZXI7XG4gIGN1c3RvbURpbWVuc2lvbnM/OiB7IGluZGV4OiBudW1iZXI7IHZhbHVlOiBzdHJpbmcgfVtdO1xuICBkaXNhYmxlQ2FtcGFpZ25QYXJhbWV0ZXJzVHJhY2tpbmc/OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRUcmFja2luZ0NvbmZpZ3VyYXRpb246IE1hdG9tb1RyYWNraW5nQ29uZmlndXJhdGlvbiA9IHtcbiAgZGlzYWJsZUNyb3NzRG9tYWluTGlua2luZzogZmFsc2UsXG4gIGRpc2FibGVDb29raWVzOiBmYWxzZSxcbiAgZG9Ob3RVc2VyU2VuZEJlYWNvbjogZmFsc2UsXG4gIGVuYWJsZURvTm90VHJhY2s6IGZhbHNlLFxuICBjb25zZW50UmVxdWlyZW1lbnQ6ICdOT05FJyxcbiAgZGV0ZWN0QnJvd3NlckZlYXR1cmVzOiBmYWxzZSxcbiAgdHJhY2tKYXZhU2NyaXB0RXJyb3JzOiBmYWxzZSxcbiAgZGlzYWJsZUNhbXBhaWduUGFyYW1ldGVyc1RyYWNraW5nOiBmYWxzZSxcbn07XG5cbmV4cG9ydCB0eXBlIE1hdG9tb1JvdXRlVHJhY2tpbmdDb25maWd1cmF0aW9uID0ge1xuICBsaW5rVHJhY2tpbmc6IENsaWNrVHJhY2tpbmdPcHRpb247XG4gIGNsZWFySWRzOiBib29sZWFuO1xuICBpZFJlZ0V4cD86IFJlZ0V4cDtcbiAgaWRSZXBsYWNlbWVudD86IHN0cmluZztcbiAgY2xlYXJNYXRyaXhQYXJhbXM6IGJvb2xlYW47XG4gIGNsZWFyUXVlcnlQYXJhbXM6IGJvb2xlYW47XG4gIGNsZWFySGFzaDogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0Um91dGVUcmFja2luZ0NvbmZpZ3VyYXRpb246IE1hdG9tb1JvdXRlVHJhY2tpbmdDb25maWd1cmF0aW9uID0ge1xuICBsaW5rVHJhY2tpbmc6ICdOT05FJyxcbiAgY2xlYXJJZHM6IGZhbHNlLFxuICBpZFJlcGxhY2VtZW50OiAnOmlkJyxcbiAgY2xlYXJNYXRyaXhQYXJhbXM6IGZhbHNlLFxuICBjbGVhclF1ZXJ5UGFyYW1zOiBmYWxzZSxcbiAgY2xlYXJIYXNoOiBmYWxzZSxcbn07XG5cbi8qKlxuICogSW5qZWN0aW9uIHRva2VuIGZvciBpbnRlcm5hbCBNYXRvbW8gdHJhY2tlcnMuXG4gKi9cbmV4cG9ydCBjb25zdCBNQVRPTU9fVFJBQ0tFUlNfSU5URVJOQUxfQ09ORklHVVJBVElPTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxNYXRvbW9UcmFja2Vycz4oXG4gICdNYXRvbW8gdHJhY2tlcnMgaW50ZXJuYWwgY29uZmlndXJhdGlvbicsXG4pO1xuXG4vKipcbiAqIEluamVjdGlvbiB0b2tlbiBmb3IgaW50ZXJuYWwgTWF0b21vIHRyYWNraW5nIGNvbmZpZ3VyYXRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBNQVRPTU9fVFJBQ0tJTkdfSU5URVJOQUxfQ09ORklHVVJBVElPTiA9XG4gIG5ldyBJbmplY3Rpb25Ub2tlbjxNYXRvbW9UcmFja2luZ0NvbmZpZ3VyYXRpb24+KCdNYXRvbW8gdHJhY2tpbmcgaW50ZXJuYWwgY29uZmlndXJhdGlvbicpO1xuXG4vKipcbiAqIEluamVjdGlvbiB0b2tlbiBmb3IgaW50ZXJuYWwgTWF0b21vIHJvdXRlIHRyYWNraW5nIGNvbmZpZ3VyYXRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBNQVRPTU9fUk9VVEVfVFJBQ0tJTkdfSU5URVJOQUxfQ09ORklHVVJBVElPTiA9XG4gIG5ldyBJbmplY3Rpb25Ub2tlbjxNYXRvbW9Sb3V0ZVRyYWNraW5nQ29uZmlndXJhdGlvbj4oXG4gICAgJ01hdG9tbyByb3V0ZSB0cmFja2luZyBpbnRlcm5hbCBjb25maWd1cmF0aW9uJyxcbiAgKTtcblxuLyoqXG4gKiBJbmplY3Rpb24gdG9rZW4gZm9yIE1hdG9tbyBkZWJ1ZyB0cmFjaW5nLlxuICovXG5leHBvcnQgY29uc3QgTUFUT01PX0RFQlVHX1RSQUNJTkcgPSBuZXcgSW5qZWN0aW9uVG9rZW48Ym9vbGVhbj4oJ01hdG9tbyBkZWJ1ZyB0cmFjaW5nJyk7XG4iXX0=